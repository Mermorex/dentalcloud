// lib/main.dart
import 'dart:async';
import 'package:dental/models/patient.dart';
import 'package:dental/providers/patient_provider.dart';
import 'package:dental/screens/add_patient_screen.dart';
import 'package:dental/screens/edit_patient_screen.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:dental/screens/home_screen.dart';
import 'package:dental/screens/auth_screen.dart';
import 'package:dental/screens/set_password_screen.dart';
// Import for kDebugMode
import 'package:flutter/foundation.dart' show kDebugMode;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeDateFormatting('fr_FR', null);
  await Supabase.initialize(
    url: 'https://jymqyezkyzzvuvqephdh.supabase.co',
    anonKey:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp5bXF5ZXpreXp6dnV2cWVwaGRoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1NDkwNjcsImV4cCI6MjA2OTEyNTA2N30.CqnJ-yVjf5M_y6DzpZ5sRsBT_9HlFPPm8sn5vMThYPo',
    // Ensure Supabase is configured to use standard web storage (localStorage)
    // which provides the "Rester connecté" behavior by default for web apps.
  );
  final uri = Uri.base;
  // Traiter le lien de réinitialisation de mot de passe dès le début
  final isAuthRedirect =
      uri.queryParameters['type'] == 'recovery' ||
      uri.pathSegments.contains('set-password');
  if (isAuthRedirect) {
    try {
      print('🔐 Auth redirect detected: $uri');
      await Supabase.instance.client.auth.getSessionFromUrl(uri);
      print('✅ Session created from URL');
    } on AuthException catch (e) {
      print('❌ Auth error: ${e.message}');
    } catch (e) {
      print('❌ Unexpected error: $e');
    }
  }
  runApp(
    MultiProvider(
      providers: [ChangeNotifierProvider(create: (_) => PatientProvider())],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Dental App',
      theme: ThemeData(
        primarySwatch: Colors.teal,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        textTheme: GoogleFonts.montserratTextTheme(Theme.of(context).textTheme),
        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Colors.white,
          hintStyle: GoogleFonts.montserrat(color: Colors.grey[400]),
          labelStyle: GoogleFonts.montserrat(color: Colors.teal[800]),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.teal,
            foregroundColor: Colors.white,
            textStyle: GoogleFonts.montserrat(fontWeight: FontWeight.bold),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: Colors.teal,
            textStyle: GoogleFonts.montserrat(),
          ),
        ),
      ),
      home: const AuthStateWrapper(), // This now handles initialization
      onGenerateRoute: (settings) {
        if (settings.name == '/home') {
          return MaterialPageRoute(builder: (_) => const HomeScreen());
        } else if (settings.name == '/add-patient') {
          return MaterialPageRoute(builder: (_) => const AddPatientScreen());
        } else if (settings.name == '/login') {
          return MaterialPageRoute(builder: (_) => const AuthScreen());
        } else if (settings.name == '/set-password') {
          return MaterialPageRoute(builder: (_) => const SetPasswordScreen());
        } else if (settings.name == '/edit-patient') {
          final patient = settings.arguments as Patient;
          return MaterialPageRoute(
            builder: (_) => EditPatientScreen(patient: patient),
          );
        }
        return null;
      },
    );
  }
}

class AuthStateWrapper extends StatefulWidget {
  const AuthStateWrapper({super.key});
  @override
  State<AuthStateWrapper> createState() => _AuthStateWrapperState();
}

class _AuthStateWrapperState extends State<AuthStateWrapper> {
  late final StreamSubscription<AuthState> _authSub;
  bool _checkingAuth = true; // Flag for initial check
  bool _authStateResolved =
      false; // Flag to ensure listener handles navigation once

  @override
  void initState() {
    super.initState();
    _setupAuthListener(); // Setup listener for auth state changes
    // The primary logic for initial navigation will be in the auth listener.
    // We just need to set up the listener and show a loading state initially.
  }

  /// Sets up a listener for real-time auth state changes.
  /// This is the primary mechanism for navigating on app start/refresh.
  /// Also handles automatic login for debug mode.
  void _setupAuthListener() async {
    final client = Supabase.instance.client;
    _authSub = client.auth.onAuthStateChange.listen(
      (data) async {
        final AuthChangeEvent event = data.event;
        final Session? session = data.session;
        print("AuthStateWrapper Listener: Received event '$event'.");

        // Prevent multiple navigation attempts
        if (_authStateResolved) {
          print(
            "AuthStateWrapper Listener: Auth state already resolved, ignoring event '$event'.",
          );
          return;
        }

        if (!mounted) return;
        setState(() {
          // Stop showing loading indicator once we get any definitive auth state
          _checkingAuth = false;
        });

        // Handle the initial session load
        if (event == AuthChangeEvent.initialSession) {
          _authStateResolved = true; // Mark as resolved
          if (session != null) {
            print(
              "AuthStateWrapper Listener: Initial session loaded and is valid. Navigating to /home.",
            );
            Navigator.of(context).pushReplacementNamed('/home');
          } else {
            print(
              "AuthStateWrapper Listener: Initial session loaded and is null/invalid.",
            );
            // --- Automatic Login Logic for Debug Mode ---
            // Check if we are in debug mode (flutter run typically implies debug)
            if (kDebugMode) {
              print("AuthStateWrapper Listener: Debug mode detected. Attempting automatic login.");
              try {
                // IMPORTANT: Replace 'YOUR_TEST_PASSWORD' with the actual password for benneji.slim@gmail.com
                final response = await client.auth.signInWithPassword(
                  email: 'benneji.slim@gmail.com',
                  password: 'YOUR_TEST_PASSWORD', // <-- PUT YOUR TEST PASSWORD HERE
                );
                if (response.user != null) {
                  print("AuthStateWrapper: Automatic login successful for benneji.slim@gmail.com");
                  // Navigation will be handled by the subsequent 'signedIn' event
                  // We don't navigate here directly because the listener will catch the signedIn event
                } else {
                  // This case is unlikely with signInWithPassword but good to handle
                  print("AuthStateWrapper: Automatic login failed (no user returned). Navigating to /login.");
                  Navigator.of(context).pushReplacementNamed('/login');
                }
              } on AuthException catch (e) {
                print("AuthStateWrapper: Automatic login failed with AuthException: ${e.message}");
                // Optionally show an error or navigate to login
                Navigator.of(context).pushReplacementNamed('/login');
              } catch (e) {
                print("AuthStateWrapper: Unexpected error during automatic login: $e");
                Navigator.of(context).pushReplacementNamed('/login');
              }
            } else {
              // Not in debug mode, proceed to login normally
              print("AuthStateWrapper Listener: Not in debug mode. Navigating to /login.");
              Navigator.of(context).pushReplacementNamed('/login');
            }
            // ---
          }
        }
        // Handle sign-in (e.g., after successful login flow completes OR automatic login)
        else if (event == AuthChangeEvent.signedIn) {
          _authStateResolved = true; // Mark as resolved
          if (session != null) {
            print(
              "AuthStateWrapper Listener: Signed in event received, navigating to /home.",
            );
            Navigator.of(context).pushReplacementNamed('/home');
          } else {
            // Edge case, but handle if session is unexpectedly null
            print(
              "AuthStateWrapper Listener: Signed in event but session is null. Navigating to /login.",
            );
            Navigator.of(context).pushReplacementNamed('/login');
          }
        }
        // Handle sign-out (e.g., token expiry, manual sign out, forced logout)
        else if (event == AuthChangeEvent.signedOut) {
          _authStateResolved = true; // Mark as resolved
          print(
            "AuthStateWrapper Listener: Signed out event received, navigating to /login.",
          );
          Navigator.of(context).pushReplacementNamed('/login');
        }
        // Handle token refresh if it results in a valid session
        else if (event == AuthChangeEvent.tokenRefreshed) {
          // Only navigate if we haven't already (e.g., initialSession might not have fired yet
          // or session was lost and now recovered)
          if (!_authStateResolved && session != null) {
            _authStateResolved = true;
            print(
              "AuthStateWrapper Listener: Token refreshed, session valid. Navigating to /home.",
            );
            Navigator.of(context).pushReplacementNamed('/home');
          } else if (!_authStateResolved && session == null) {
            // If refresh failed and we still haven't resolved, go to login
            _authStateResolved = true;
            print(
              "AuthStateWrapper Listener: Token refresh failed, session invalid. Navigating to /login.",
            );
            Navigator.of(context).pushReplacementNamed('/login');
          }
          // If _authStateResolved is true, we ignore this as navigation already happened.
        }
        // Optionally handle PASSWORD_RECOVERY if needed
        // else if (event == AuthChangeEvent.passwordRecovery) { ... }
      },
      onError: (error, stackTrace) {
        print("AuthStateWrapper Listener: Error in auth state stream: $error");
        if (!_authStateResolved && mounted) {
          setState(() {
            _checkingAuth = false;
          });
          _authStateResolved = true;
          // On stream error, assume no session and go to login for safety
          print(
            "AuthStateWrapper Listener: Stream error, navigating to /login.",
          );
          Navigator.of(context).pushReplacementNamed('/login');
        }
      },
    );
  }

  @override
  void dispose() {
    _authSub.cancel(); // Cancel the listener to prevent memory leaks
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Show a loading indicator while waiting for the initial auth state.
    if (_checkingAuth) {
      return const Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text("Chargement..."),
            ],
          ),
        ),
      );
    }
    // If not checking auth anymore but listener hasn't navigated (unlikely but possible edge case),
    // show a message.
    return const Scaffold(
      body: Center(
        child: Text(
          "Gestion de l'authentification...\n(Si vous voyez ceci, veuillez actualiser la page.)",
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}